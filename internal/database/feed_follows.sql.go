// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: feed_follows.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFeedFollow = `-- name: CreateFeedFollow :one
WITH inserted_feed_follows AS (
    INSERT INTO feed_follows(id, created_at, updated_at, user_id, feed_id)
        VALUES (
                   $1,
                   $2,
                   $3,
                   $4,
                   $5
               )
    RETURNING id, created_at, updated_at, user_id, feed_id
)
SELECT inserted_feed_follows.id, inserted_feed_follows.created_at, inserted_feed_follows.updated_at, inserted_feed_follows.user_id, inserted_feed_follows.feed_id, feeds.name AS feed_name, users.name AS user_name
FROM inserted_feed_follows
INNER JOIN feeds ON inserted_feed_follows.feed_id = feeds.id
INNER JOIN users ON inserted_feed_follows.user_id = users.id
`

type CreateFeedFollowParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    uuid.UUID
}

type CreateFeedFollowRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    uuid.UUID
	FeedName  string
	UserName  string
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (CreateFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.FeedID,
	)
	var i CreateFeedFollowRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
		&i.FeedName,
		&i.UserName,
	)
	return i, err
}

const deleteFeedFollowForUser = `-- name: DeleteFeedFollowForUser :exec
DELETE FROM feed_follows ff
WHERE ff.user_id = $1 AND ff.feed_id = (SELECT id FROM feeds WHERE url = $2)
`

type DeleteFeedFollowForUserParams struct {
	UserID uuid.UUID
	Url    string
}

func (q *Queries) DeleteFeedFollowForUser(ctx context.Context, arg DeleteFeedFollowForUserParams) error {
	_, err := q.db.ExecContext(ctx, deleteFeedFollowForUser, arg.UserID, arg.Url)
	return err
}

const getFollowedFeedsForUser = `-- name: GetFollowedFeedsForUser :many
SELECT f.id, f.created_at, f.updated_at, f.name, f.url, f.user_id
FROM feeds f
         INNER JOIN feed_follows ff ON f.id = ff.feed_id
WHERE ff.user_id = $1
`

type GetFollowedFeedsForUserRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	Url       string
	UserID    uuid.UUID
}

func (q *Queries) GetFollowedFeedsForUser(ctx context.Context, userID uuid.UUID) ([]GetFollowedFeedsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getFollowedFeedsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFollowedFeedsForUserRow
	for rows.Next() {
		var i GetFollowedFeedsForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Url,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
